(in-package :elray)

(defgeneric intersect (p1 p2 object))

(defmethod intersect (p1 p2 (o sphere))
  (let ((line (make-line-from-vects p1 p2)))
    (let ((slope (line-slope line))
	  (x0 (line-offset line))
	  (c (position o))
	  (r (radius o)))
      (declare (single-float r))
      (let* ((t1 (dot slope (- c x0)))
	     (t2 (- 0 (dot (- c x0) (- c x0))))
	     (inner (+ (sqr r) t2 (sqr t1))))
	(declare (single-float t1 t2 inner))
	(if (> inner 0)
	    (let* ((d1 (+ t1 (sqrt inner)))
		   (d2 (- t1 (sqrt inner)))
		   (end1 (get-vect-at-time line d1))
		   (end2 (get-vect-at-time line d2))
		   (dist1 (distance p1 end1))
		   (dist2 (distance p1 end2)))
	      (declare (single-float d1 d2 dist1 dist2))
	      (if (< (- dist1 dist2) 0)
		  end1
		  end2))
	    nil)))))

(defmethod intersect (p1 p2 (o plane))
  "Equation of a plane is where N dot x = N dot location-on-plane."
  (let* ((line (make-line-from-vects p1 p2))
	 (slope (line-slope line))
	 (x0 (line-offset line))
	 (t1 (dot (normal o) slope)))
    (when (/= t1 0)
      (let* ((t2 (- (position o) x0))
	     (t3 (dot (normal o) t2))
	     (time (/ t3 t1)))
	(when (> time 0)
	  (get-vect-at-time line time))))))
